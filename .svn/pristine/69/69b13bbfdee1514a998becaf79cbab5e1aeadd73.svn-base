
import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

public class Game extends Canvas implements Runnable{

	private final int SCALE = 4;
	private final int WIDTH = 160;
	private final int HEIGHT = 120;
	private boolean running = false;	
	private int tickCount = 0;
	private final int maxFPS = 250;
	int renderPointx = -80; 
	int renderPointy = -60;
	
	BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_ARGB);
	private int[] pixels = ((DataBufferInt) image.getRaster().getDataBuffer()).getData();		//This returns the colour of the pixels in a decimal format of the hex equivalent of the colour
	SpriteSheet spriteSheet;
	Player player;
	Screen screen;
	InputHandler input;
	

	
	public Game() {
		this.setMinimumSize(new Dimension(WIDTH*SCALE, HEIGHT*SCALE));
		this.setMaximumSize(new Dimension(WIDTH*SCALE, HEIGHT*SCALE));
		this.setPreferredSize(new Dimension(WIDTH*SCALE, HEIGHT*SCALE));	
		
		
	}
	
	public void start(){
		running = true;
		new Thread(this).start();
	}
	
	public void stop(){
		running = false;
	}
	
	public int[] getPixels(){
		return pixels;
	}
	
	/**
	 * This is run at start-up once and initializes everything. 
	 */
	public void init(){
		spriteSheet = new SpriteSheet("res/SpriteSheet.png");
		Level level = new Level ("res/level.png", spriteSheet);
		player = new Player(spriteSheet, this);
		screen = new Screen(this, spriteSheet, HEIGHT, WIDTH, level, player);
		input = new InputHandler(this, screen);
		
	}
	
	
	
	/**
	 * converts the 2D array map of the pixels on the screen to the 1D array of the pixels on the screen. 
	 */
	public void convertTo1D(int [][] pixels2D){
		int index = 0;
		for (int row=0; row<HEIGHT; row++){
			for(int column=0; column<WIDTH; column++){
				pixels[index] = pixels2D[row][column];
				index++;
			}
		}
		
	}
	
	/**
	 * 
	 */
	public void tick(){	
		tickCount++;
		if(input.up.isPressed() && screen.yOffSet != 12) player.yPos--;
		if(input.down.isPressed() && screen.yOffSet != -12) player.yPos++;
		if(input.left.isPressed() && screen.xOffSet != 16) player.xPos--;
		if(input.right.isPressed() && screen.xOffSet != -16) player.xPos++;
		
	}
	
	/**
	 * 
	 */
	public void render(){
		BufferStrategy bs = getBufferStrategy();
		if (bs == null){
			createBufferStrategy(3);
			return;
		}
		
		
		screen.render();
		Graphics g = bs.getDrawGraphics();
		
		g.drawImage(image, renderPointx, renderPointy, getWidth()+160 , getHeight()+120, null);
		
		
		g.dispose();
		bs.show();
	}

	/* (non-Javadoc)
	 * @see java.lang.Runnable#run()
	 * Main thread of the game. Calls the tick() and render() methods every second. 
	 */
	@Override
	public void run() {
		long lastTime = System.nanoTime();
		double nsPerTick = 1000000000D / 60D;
		
		int ticks = 0;
		int frames = 0;
		
		long lastTimer = System.currentTimeMillis();
		double delta = 0;
		
		init();
		
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / nsPerTick;
			lastTime = now;
			
			boolean shouldRender = true;
			
			while(delta >= 1){
				ticks++;
				tick();
				delta -= 1;		
				shouldRender = true;
			}
			
			try{
				Thread.sleep(2);
			}
			catch (InterruptedException e){
				e.printStackTrace();
			}
			
			
			if (shouldRender){
				frames++;
				render();
			}
			
			if (System.currentTimeMillis() - lastTimer >= 1000){
				lastTimer += 1000;
				System.out.println(ticks + " ticks, " + frames + " frames.");
				frames = 0;
				ticks = 0;
			}
		}		
	}
	
	
	

}
